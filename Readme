   nessDB using Compact-Hash-Tree for Index structure in memorystream. Its features are less-memory and high-performance.
   Write and read-random are faster than LevelDB.

   How to do
   =========
	1, cd src
	2, make
	3, ./nessdb_bench
	4, show the benchmark result
  
  
   Features
   ========
	a, Keys&values are arbitrary byte arrays.
	b, Basic operations are Put(key,value),Get(key),Remove(key).
	c, Keys are compacted to integer   in memory.

   Benchmark
   =========
	Keys:		16 bytes each
	Values:		84 bytes each
	Entries:	1000000
	RawSize:	95.4 MB (estimated)
	FileSize:	103.0 MB (estimated)
	----------------------------------------------------------------------------------------------------------
	nessDB:		version 1.3
	Date:		Sat Jul 30 17:01:18 2011
	CPU:		2 *  Intel(R) Pentium(R) Dual  CPU  T3200  @ 2.00GHz
	CPUCache:	1024 KB

	+-----------------------+-------------------+----------------------------------------+-------------------+
	|write:			1.100000 micros/op; |	909090.909091 writes/sec(estimated); |	93.633478 MB/sec |
	+-----------------------+-------------------+----------------------------------------+-------------------+
	|readseq:		1.280000 micros/op; |	781250.000000 reads /sec(estimated); |	65.565109 MB/sec |
	+-----------------------+-------------------+----------------------------------------+-------------------+
	|readrandom:		4.920000 micros/op; |	203252.032520 reads /sec(estimated); |	17.057589 MB/sec |
	+-----------------------+-------------------+----------------------------------------+-------------------+

