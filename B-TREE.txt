Compact-Hash-Tree dump to B-Tree on disk

block layout
============
+--------+-----------+------------+
| key    |val_offset |val_length  |
+--------+-----------+------------+
key:fixed N bytes key
val_offset:32bit,the start postion DB file
val_length:32bit,the length of value



bucket layout
=============
+--------+--------+--------+--------+
| used  			    |
+--------+--------+--------+--------+
|   	block1			    |
+--------+--------+--------+--------+
|   	block2			    |
+--------+--------+--------+--------+
|  ...all the other blocks.......   |
+--------+--------+--------+--------+
| next bucket	pointer		    |
+--------+--------+--------+--------+
used:32bit,used block num
block:
next bucket pointer: the pointer of next bucket in other levels.
 



index  layout
=============

+--------+--------+--------+--------+
|   used       	 		    |
+--------+--------+--------+--------+
|              bucket 1             |
+--------+--------+--------+--------+
|              bucket 2             |
+--------+--------+--------+--------+
|     ... all the other buckets ..  |
+--------+--------+--------+--------+
|  end   |
+--------+
used:32bit,used buckets num
bucket:
end:32bit,a pointer


data-structure
==============
struct block
{
	char key[FIXED_SIZE];
	int val_offset;
	int val_length;
	
}
struct bucket
{
	int used;
	int level;
	struct block *blocks;
	int nxt_bucket_offset;
}
	

method description
==================

add(char* key,char* val)

	int hash=hash_func(key);
	int offset=hash%CAPACITY;
	
	int bucket_0_size=4+(16+4+4)*10+4;
	read(“level-0”,offset,bucket_0_size,bucket);
	int used=bucket[4];
	if(used<10)
	
		int w_offset=offset+(4+(16+4+4)*used);
		entry e=new;
		e.key=key;
		e.val_offset=_val_offset;
		e.val_length=strlen(val);
		write(“level-0”,w_offset,e);
	
	else
	
		look up for other levels
	



get(char* key)

	int hash=hash_func(key);
	int offset=hash%CAPACITY;
	int bucket_0_size=4+(16+4+4)*10+4;

	read(“level-0”,offset,bucket_0_size,bucket);
	foreach(entry e in entris)
	
		if(e.key==key)
		
			return read(“db”,e.val_offset,e.val_length);
		
		
	return NULL;



....